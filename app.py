from flask import Flask, render_template, request, jsonify
from flask_cors import CORS
from openai import OpenAI
import os
import logging

app = Flask(__name__)
CORS(app)

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# C·∫•u h√¨nh API c·ªë ƒë·ªãnh (l·∫•y t·ª´ main.py)
API_CONFIG = {
    'base_url': 'https://aiportalapi.stu-platform.live/jpe',
    'api_key': 'sk-NYx_MReZLJNz1UzNnYvE4w',
    'model': 'gpt-4o-mini'
}

# Kh·ªüi t·∫°o OpenAI client
try:
    client = OpenAI(
        base_url=API_CONFIG['base_url'],
        api_key=API_CONFIG['api_key']
    )
    logger.info("‚úÖ OpenAI client initialized successfully")
except Exception as e:
    logger.error(f"‚ùå Failed to initialize OpenAI client: {e}")
    client = None

@app.route('/')
def index():
    """Trang ch·ªß - hi·ªÉn th·ªã giao di·ªán chat"""
    return render_template('index.html')

@app.route('/api/chat', methods=['POST'])
def chat():
    """X·ª≠ l√Ω tin nh·∫Øn chat"""
    try:
        if not client:
            return jsonify({
                'success': False,
                'error': 'L·ªói k·∫øt n·ªëi API. H√£y kh·ªüi ƒë·ªông l·∫°i server.'
            })
        
        data = request.get_json()
        user_message = data.get('message', '').strip()
        chat_history = data.get('history', [])
        
        if not user_message:
            return jsonify({
                'success': False,
                'error': 'Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
            })
        
        logger.info(f"Processing chat message: {user_message[:100]}...")
        
        # Chu·∫©n b·ªã messages cho OpenAI
        messages = [
            {
                "role": "system", 
                "content": """B·∫°n l√† AI Dev Helper - tr·ª£ l√Ω l·∫≠p tr√¨nh Python chuy√™n nghi·ªáp. 

Nhi·ªám v·ª• c·ªßa b·∫°n:
- Gi·∫£i th√≠ch code Python m·ªôt c√°ch chi ti·∫øt v√† d·ªÖ hi·ªÉu
- T·ªëi ∆∞u h√≥a code ƒë·ªÉ c√≥ performance t·ªët h∆°n
- T√¨m v√† s·ª≠a l·ªói trong code Python
- Vi·∫øt unit test cho code
- ƒê∆∞a ra g·ª£i √Ω c·∫£i thi·ªán code
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin
- S·ª≠ d·ª•ng markdown ƒë·ªÉ format code v√† l√†m n·ªïi b·∫≠t th√¥ng tin quan tr·ªçng"""
            }
        ]
        
        # Th√™m l·ªãch s·ª≠ chat (gi·ªõi h·∫°n 8 tin nh·∫Øn g·∫ßn nh·∫•t ƒë·ªÉ ti·∫øt ki·ªám token)
        if chat_history:
            messages.extend(chat_history[-8:])
        
        # Th√™m tin nh·∫Øn hi·ªán t·∫°i
        messages.append({"role": "user", "content": user_message})
        
        # G·ª≠i request ƒë·∫øn OpenAI
        response = client.chat.completions.create(
            model=API_CONFIG['model'],
            messages=messages,
            max_tokens=16000,
            temperature=0.7
        )
        
        bot_reply = response.choices[0].message.content.strip()
        
        logger.info("‚úÖ Chat response generated successfully")
        
        return jsonify({
            'success': True,
            'response': bot_reply
        })
        
    except Exception as e:
        error_message = str(e)
        logger.error(f"‚ùå Chat error: {error_message}")
        
        # X·ª≠ l√Ω l·ªói ph·ªï bi·∫øn
        if "rate limit" in error_message.lower():
            error_message = "ƒê√£ v∆∞·ª£t gi·ªõi h·∫°n request. H√£y th·ª≠ l·∫°i sau."
        elif "quota" in error_message.lower():
            error_message = "ƒê√£ h·∫øt quota API. H√£y ki·ªÉm tra t√†i kho·∫£n."
        elif "model" in error_message.lower():
            error_message = "Model kh√¥ng h·ªó tr·ª£ ho·∫∑c kh√¥ng t·ªìn t·∫°i."
        elif "401" in error_message or "unauthorized" in error_message.lower():
            error_message = "API key kh√¥ng h·ª£p l·ªá."
        
        return jsonify({
            'success': False,
            'error': error_message
        })

@app.route('/api/status')
def status():
    """Ki·ªÉm tra tr·∫°ng th√°i server"""
    return jsonify({
        'status': 'running',
        'api_connected': client is not None,
        'config': {
            'endpoint': API_CONFIG['base_url'],
            'model': API_CONFIG['model'],
            'has_api_key': bool(API_CONFIG['api_key'])
        }
    })

@app.errorhandler(404)
def not_found(error):
    return jsonify({'error': 'API endpoint not found'}), 404

@app.errorhandler(500)
def server_error(error):
    return jsonify({'error': 'Internal server error'}), 500

if __name__ == '__main__':
    print("=" * 60)
    print("üöÄ AI Dev Helper - Python Assistant")
    print("=" * 60)
    print("üì° Server ƒëang kh·ªüi ƒë·ªông t·∫°i: http://localhost:5000")
    print("üåê M·ªü tr√¨nh duy·ªát v√† truy c·∫≠p ƒë·ªãa ch·ªâ tr√™n ƒë·ªÉ s·ª≠ d·ª•ng")
    print("üéØ T√≠nh nƒÉng:")
    print("   ‚Ä¢ Nh·∫≠p code Python v√†o panel tr√°i")
    print("   ‚Ä¢ Chat v·ªõi AI v·ªÅ code c·ªßa b·∫°n")
    print("   ‚Ä¢ Gi·∫£i th√≠ch, t·ªëi ∆∞u, debug, vi·∫øt test")
    print("   ‚Ä¢ Theme dark mode ƒë·∫πp m·∫Øt")
    
    if client:
        print("‚úÖ API ƒë√£ k·∫øt n·ªëi s·∫µn s√†ng!")
    else:
        print("‚ùå L·ªói API - h√£y ki·ªÉm tra c·∫•u h√¨nh")
    
    print("=" * 60)
    
    # T·∫°o th∆∞ m·ª•c templates n·∫øu ch∆∞a c√≥
    os.makedirs('templates', exist_ok=True)
    
    # Copy file index.html v√†o th∆∞ m·ª•c templates
    try:
        import shutil
        if os.path.exists('index.html'):
            shutil.copy2('index.html', 'templates/index.html')
            print("üìÅ Templates folder ready")
    except Exception as e:
        print(f"‚ö†Ô∏è Warning: {e}")
    
    app.run(host='0.0.0.0', port=5000, debug=True)