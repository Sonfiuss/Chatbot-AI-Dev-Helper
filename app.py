from flask import Flask, render_template, request, jsonify
from flask_cors import CORS
from openai import OpenAI
from dotenv import load_dotenv
import os
import logging

app = Flask(__name__)
CORS(app)

# Logging c·∫•u h√¨nh
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# N·∫°p bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env (n·∫øu c√≥)
load_dotenv()

BASE_URL = os.getenv("OPENAI_BASE_URL", "https://aiportalapi.stu-platform.live/jpe")
API_KEY = os.getenv("OPENAI_API_KEY")
MODEL_NAME = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

client = None

def init_client():
    global client
    try:
        if not API_KEY:
            logger.warning("OPENAI_API_KEY is not set. API calls will fail until it's provided.")
            client = None
            return
        client = OpenAI(base_url=BASE_URL, api_key=API_KEY)
        logger.info("‚úÖ OpenAI client initialized successfully")
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize OpenAI client: {e}")
        client = None


@app.route('/')
def index():
    """Trang ch·ªß - hi·ªÉn th·ªã giao di·ªán chat"""
    return render_template('index.html')

@app.route('/api/chat', methods=['POST'])
def chat():
    """X·ª≠ l√Ω tin nh·∫Øn chat"""
    try:
        if client is None:
            init_client()
        if client is None:
            return jsonify({'success': False, 'error': 'Ch∆∞a c·∫•u h√¨nh OPENAI_API_KEY trong .env'}), 400

        data = request.get_json() or {}
        user_message = (data.get('message') or '').strip()
        chat_history = data.get('history') or []

        if not user_message:
            return jsonify({'success': False, 'error': 'Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'}), 400

        logger.info("Processing chat message ‚Ä¶")

        # Chu·∫©n b·ªã messages cho OpenAI
        messages = [{
            'role': 'system',
            'content': (
                'B·∫°n l√† AI Dev Helper - tr·ª£ l√Ω l·∫≠p tr√¨nh Python. '
                'Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát khi ng∆∞·ªùi d√πng d√πng ti·∫øng Vi·ªát. '
                'S·ª≠ d·ª•ng markdown, ∆∞u ti√™n v√≠ d·ª• code ng·∫Øn g·ªçn.'
            )
        }]

        # Th√™m l·ªãch s·ª≠ chat (gi·ªõi h·∫°n 8 tin g·∫ßn nh·∫•t)
        if chat_history:
            messages.extend(chat_history[-8:])

        messages.append({'role': 'user', 'content': user_message})

        response = client.chat.completions.create(
            model=MODEL_NAME,
            messages=messages,
            max_tokens=800,
            temperature=0.7,
        )

        bot_reply = response.choices[0].message.content.strip()
        return jsonify({'success': True, 'response': bot_reply})

    except Exception as e:
        error_message = str(e)
        logger.error(f"‚ùå Chat error: {error_message}")
        if '401' in error_message or 'unauthorized' in error_message.lower():
            error_message = 'API key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.'
        return jsonify({'success': False, 'error': error_message}), 500

@app.route('/api/status')
def status():
    """Ki·ªÉm tra tr·∫°ng th√°i server"""
    return jsonify({
        'status': 'running',
        'api_connected': client is not None,
        'config': {
            'endpoint': BASE_URL,
            'model': MODEL_NAME,
            'has_api_key': bool(API_KEY)
        }
    })

@app.errorhandler(404)
def not_found(error):
    return jsonify({'error': 'API endpoint not found'}), 404

@app.errorhandler(500)
def server_error(error):
    return jsonify({'error': 'Internal server error'}), 500

if __name__ == '__main__':
    print("=" * 60)
    print("üöÄ AI Dev Helper - Python Assistant")
    print("=" * 60)
    print("üì° Server ƒëang kh·ªüi ƒë·ªông t·∫°i: http://localhost:5000")
    print("üåê M·ªü tr√¨nh duy·ªát v√† truy c·∫≠p ƒë·ªãa ch·ªâ tr√™n ƒë·ªÉ s·ª≠ d·ª•ng")
    print("üîê L∆∞u √Ω: c·∫•u h√¨nh API ƒë∆∞·ª£c ƒë·ªçc t·ª´ bi·∫øn m√¥i tr∆∞·ªùng/.env (kh√¥ng commit l√™n git)")

    # Kh·ªüi t·∫°o client (n·∫øu c√≥ API key)
    init_client()

    app.run(host='0.0.0.0', port=5000, debug=True)
